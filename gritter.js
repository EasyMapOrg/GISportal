
/**
 * Setup the options for the gritter and create opening
 * welcome message.
 */
function setupGritter()
{
   $.extend($.gritter.options, { 
      position: 'bottom-right',
      fade_in_speed: 'medium',
      fade_out_speed: 800,
      time: 6000
   });
}

/**
 * Create the opening message that the user will see.
 */
function createWelcomeMessage()
{
   map.tutUID = showMessage('welcomeTutorial', null);
}

/**
 * Displays errors as gritter messages.
 * 
 * @param {Object} layer - The OpenLayers.Layer object, can be null.
 * @param {String} type - A short string describing the object that has error'd.
 * @param {Object} request - The request object generated by the error.
 * @param {Object} errorType - The errorType object generated by the error.
 * @param {Object} exception - The exception object generated by the error.
 */
function gritterErrorHandler(data)
{  
   if(data.request.status == 400)
   {
      showMessage('error400', data);
      return
   }
   else if (data.request.status == 500)
   {
      showMessage('error500', data);
      return
   }
   else if (data.errorType == 'parsererror')
   {
      showMessage('errorParserError', data);
      return
   }
   
   
   if(data.layer)
   {
      $.gritter.add({
         title: data.errorType.toUpperCase() + ': ' + data.request.status + ' (' + data.exception + ')',
         text: 'Could not get the ' + data.type + ' from the server for ' + data.layer.name + '. Try refreshing the page',
         //image: 'img/OpEc_small.png',
         class_name: 'gritter-light',
         sticky: true,
      });
   }
   else
   {
      $.gritter.add({
         title: data.errorType.toUpperCase() + ': ' + data.request.status + ' (' + data.exception + ')',
         text: 'Could not get the ' + data.type + ' from the server. Try refreshing the page',
         //image: 'img/OpEc_small.png',
         class_name: 'gritter-light',
         sticky: true,
      });
   }
}

/**
 * A logic function that tries to diagnose any problems 
 * with layers and show the correct help message.
 */ 
function gritterLayerHelper()
{      
   $(document).on('click', 'img[src="img/exclamation_small.png"]', function() 
   {
      var layerID = $(this).parent().parent().attr('id');
      var layer = map.getLayersByName(layerID)[0];
      var helpMessage = 'none';
      
      // Is the layer temporal?
      if(layer.temporal)
      {     
         var inst = $('#viewDate').datepicker('getDate'); // Get the selected date
        
         if(inst != null) // If the date is set...
         {
            var thedate = new Date(inst.selectedYear, inst.selectedMonth, inst.selectedDay);
            var uidate = ISODateString(thedate);
            var mDate = layer.matchDate(uidate);

            // Can the layer display the selected date?
            if(mDate == null)
            {
               helpMessage = 'dateNotInRange';
            }
         }
         // If the date is not set...
         else if(inst == null)
         {
            helpMessage = 'noDate';
         }
      }

      var data = { layer: layer };
      showMessage(helpMessage, data);

      return false;
   });
}

/**
 * Creates all the help messages to be used.
 */
function createHelpMessages()
{
   // Opening welcome message
   map.helperMessages['welcomeTutorial'] = {
      title: function() {
         return 'Welcome to the Opec Portal';
      },
      text: function(layer) { 
         return 'You can use the ' +
         '<a id="wtOpenLeftPanel" href="#">layers button</a>' +
         ' on the left to open and close the layers panel ' +
         ' which allows you to select the layers you want to view. The ' +
         '<a id="wtOpenRightPanel" href="#">data button</a>' + 
         ' on the right does the same for the data panel ' +
         'which allows you to specify regions of interest (R.O.I) ' +
         'and then get graphs for the selected area. ' +
         '<a id="wtNext" href="#">Next</a>';
      },
      afterOpen: function(layer) {
         // Open the layer panel on click
         $('#wtOpenLeftPanel').click(function(e) {
            $('.triggerL').trigger('click');
            return false;
         })
         // Highlight the layer button with a red border on hover
         .hover(function() {
               $('.triggerL').css('border', '2px solid red');
            },
            function() {
               $('.triggerL').css('border', '');
         });

         // Open the data panel on click
         $('#wtOpenRightPanel').click(function(e) {
            $('.triggerR').trigger('click');
            return false;
         })
         // Highlight the data button with a red border on hover
         .hover(function() {
               $('.triggerR').css('border', '2px solid red');
            },
            function() {
               $('.triggerR').css('border', '');
         });

         // Open the data panel on click
         $('#wtNext').click(function(e) {

            removeMessage(map.tutUID);
            map.tutUID = showMessage('dateTutorial', null);

            return false;
         });
      },
      max: 1,
   };
   
   // Date Tutorial
   map.helperMessages['dateTutorial'] = {
      title: function() {
         return 'Selecting Dates';
      },
      text: function() {
         return 'To select a date to be used by temporal layers, click on the ' +
            '<a id="dtDatepickerBtn" href="#">datepicker</a>' +
            ' at the top of the screen. Then use the left and right arrows to ' +
            'change the month or use the dropdown boxes. You can also type a date into the textbox. ' +
            '<a id="dtNext" href="#">Next</a>';
      },
      afterOpen: function() {
         // Open the data panel on click
         $('#dtNext').click(function(e) {
            removeMessage(map.tutUID);
            map.tutUID = showMessage('tbdTutorial', null);

            return false;
         });

         $('#dtDatepickerBtn').click(function() {
            $('#viewDate').datepicker("show");
            return false;
         })
         .hover(function() { 
               $('#viewDate').css('border', '2px solid red'); 
            },
            function() {
               $('#viewDate').css('border', '');
            }
         );
      },
      max: 1,
   };

   // To be Continued
   map.helperMessages['tbdTutorial'] = {
      title: function() {
         return 'To Be Continued';
      },
      text: function() {
         return 'To be continued';
      },
      max: 1,
   };

   // No date selected on date picker
   map.helperMessages['noDate'] = {
      title: function() {
         return 'You need to select a date';
      },
      text: function(data) { 
         return 'This layer is a temporal layer and requires a date to be selected. ' +
            'To select a date use the ' +
            '<a id="datepickerBtn" href="#">datepicker</a>' +
            ' at the top of the screen.';
      },
      afterOpen: function(data) {
         $('#datepickerBtn').click(function() {
            var date = $.datepicker.parseDate('dd-mm-yy', data.layer.lastDate);
            $('#viewDate').datepicker("option", "defaultDate", date).datepicker("show");
            return false;
         })
         .hover(function() { 
               $('#viewDate').css('border', '2px solid red'); 
            },
            function() {
               $('#viewDate').css('border', '');
            }
         );
      },
      max: 1,
   };

   // The selected date is not supported by this layer
   map.helperMessages['dateNotInRange'] = {
      title: function() {
         return 'Select another date';
      },
      text: function(data) {
         return 'The date you have selected is not avaliable for this layer. ' +
            'This layer supports dates between ' +
            data.layer.firstDate + ' and ' + data.layer.lastDate + '.' +
            ' Try selecting another date that all layers share.';
      },
      max: 3,
   };
   
   // Layer Selector Tutorial
   map.helperMessages['layerSelector'] = {
      title: function() {
         return 'Layer Selection Tutorial';
      },
      text: function() {
         return 'The layer selector is made up of two parts. The ' +
            '<a id="help-selectedLayers" href="#">selected layers</a>' +
            ' panel and the ' +
            '<a id="help-availableLayers" href="#">available layers</a>' +
            ' panel. To select a layer, you can click the plus sign at the ' +
            'end of a layer or drag a layer from one side to the other. ' +
            'To deselect a layer you can click the minus sign at the end of ' +
            'the layer or again drag from one side to the other.';
      },
      afterOpen: function(data) {
         $('#help-selectedLayers').click(function() {
            $('#layers .selected').fadeTo('slow', 0.3, function() { $(this).fadeTo('slow', 1); });
         });
         
         $('#help-availableLayers').click(function() {
            $('#layers .available').fadeTo('slow', 0.3, function() { $(this).fadeTo('slow', 1); });
         });
      },
      max: 1,
   };
   
   // Scalebar Tutorial
   map.helperMessages['scalebar'] = {
      title: function() {
         return 'Scalebar Tutorial';
      },
      text: function() {
        return 'With the scalebar you can change the range of values used.';
      },
      max: 1,
   };
   
   // Bounding box selection for graphs
   map.helperMessages['bbox'] = {
      title: function(){
         return 'Select a bounding box';         
      },
      text: function(){
         return   'Now select a bouding box on the map using the '+
                  '<a id="rect-bbox" href="#">rectangular bounding box drawing tool</a>.';
      },
      afterOpen: function(data) {
         $('#rect-bbox').click(function() {
            $('#box').next().effect("highlight", {}, 3000);
            return false;
         });
      },
      max: 1,
   };
   
   map.helperMessages['error400'] = {
      title: function(){
         return 'Error: Bad Request';         
      },
      text: function(data){
         return 'A bad request was made to "' + data.url +'".';
      },
      max: 1,
   }
   
   map.helperMessages['error500'] = {
      title: function(){
         return 'Error: Internal Server Error';         
      },
      text: function(data){
         return 'The server at "' + data.url +'" has had an internal server error.';
      },
      max: 1,
   }
   
   map.helperMessages['errorParserError'] = {
      title: function(){
         return 'Parse Error: Unexpected character';         
      },
      text: function(data){
         return 'An unexpected character was received from "' + data.url + '".';
      },
      max: 1,
   }
}

/**
 * Shows a gritter message with the message details provided.
 * 
 * @param {Object} messageName - The message object to use for the message.
 * @param {Object} data - Any data needed for the message.
 * 
 * @return {Int} Returns the unique ID of the message created. 
 */
function showMessage(messageName, data)
{
   var uid;
   
   var message = map.helperMessages[messageName];
   // Check for a title
   if(typeof(message.title) == 'undefined')
      message.title = function() {
         return 'Sorry, No Help Message Found';
      };
   // Check for some text
   if(typeof(message.text) == 'undefined')
      message.text = function() {
         return 'Sorry, we could not find a help message for your problem. Please refer to any help documentation you have.'; 
      };
   // Check for an afterOpen method
   if(typeof(message.afterOpen) == 'undefined')
      message.afterOpen = function() {};
      
   if(typeof(message.max) == 'undefined')
      message.max = 1;

   // Add the gritter message
   uid = $.gritter.add({
      title: message.title(data),
      text: message.text(data),
      after_open: function() {
         message.afterOpen(data);
      },
      //image: 'img/OpEc_small.png',
      class_name: 'gritter-light',
      sticky: true, 
      group: messageName,
      max: message.max,
   });
   
   return uid;
}

/**
 * Removes the message found from the unique ID.
 * 
 * @param {String} messageName - The messageName of the message type to remove.
 */
function removeMessage(uid)
{
   $.gritter.remove(uid, {
      fade: false,
      speed: 'fast',
   });
}
